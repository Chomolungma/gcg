exp_name: catcher007
exp_prefix: rnn_critic
seed: 1

#################
### Algorithm ###
#################

alg:
  env: PremadeGymEnv(wrap_pygame(gym.envs.make('Catcher-v0')), record_video=False, record_log=False)
  n_envs: 1

  total_steps: 1.e+6
  learn_after_n_steps: 5.e+4
  train_every_n_steps: 4
  save_every_n_steps: 2.e+5
  update_target_after_n_steps: 5.e+4
  update_target_every_n_steps: 1.e+3
  update_preprocess_every_n_steps: 1.e+4
  log_every_n_steps: 1.e+3

  exploration_strategy:
    class: EpsilonGreedyStrategy
    GaussianStrategy:
      endpoints: [[0, 0.01], [1.e+6, 0.01]]
      outside_value: 0.01
    EpsilonGreedyStrategy:
      endpoints: [[0, 1.0], [5.e+5, 0.1], [1.e+6, 0.01]]
      outside_value: 0.01
    
  batch_size: 32
  replay_pool_size: 1.e+6
  save_rollouts: True
  save_rollouts_observations: False
  render: False

##############
### Policy ###
##############

policy:
  N: 1
  H: 1
  cost_type: combined # combined / separated
  gamma: 0.99
  obs_history_len: 1
  use_target: True
  separate_target_params: True

  class: DiscreteDQNPolicy
  DQNPolicy:
    hidden_layers: [128, 128]
    activation: tf.nn.tanh
    concat_or_bilinear: bilinear
  DiscreteDQNPolicy:
    hidden_layers: [512]
    activation: tf.nn.relu
    conv_hidden_layers: [32, 64, 64]
    conv_kernels: [8, 4, 3]
    conv_strides: [4, 2, 1]
    conv_activation: tf.nn.relu
  NstepDQNPolicy:
    hidden_layers: [128, 128]
    activation: tf.nn.tanh
    concat_or_bilinear: bilinear
  NstepDiscreteDQNPolicy:
    hidden_layers: [512]
    activation: tf.nn.relu
    conv_hidden_layers: [32, 64, 64]
    conv_kernels: [8, 4, 3]
    conv_strides: [4, 2, 1]
    conv_activation: tf.nn.relu
  MultiactionCombinedcostMLPPolicy:
    hidden_layers: [128, 128]
    activation: tf.nn.tanh
    concat_or_bilinear: bilinear
  MultiactionCombinedcostRNNPolicy:
    obs_hidden_layers: [128]
    action_hidden_layers: [128]
    reward_hidden_layers: [128]
    rnn_state_dim: 64
    use_lstm: True
    activation: tf.nn.tanh
    rnn_activation: tf.nn.relu
  MultiactionCombinedcostMuxRNNPolicy:
    obs_hidden_layers: [512]
    reward_hidden_layers: [16]
    rnn_state_dim: 32
    use_lstm: True
    activation: tf.nn.relu
    rnn_activation: tf.nn.relu
    conv_hidden_layers: [32, 64, 64]
    conv_kernels: [8, 4, 3]
    conv_strides: [4, 2, 1]
    conv_activation: tf.nn.relu

  # preprocessing
  preprocess:
    observations_mean: True
    observations_orth: True
    actions_mean: False
    actions_orth: False
    rewards_mean: False
    rewards_orth: False

  # training
  weight_decay: 1.e-8
  lr_schedule:
    endpoints: [[0, 1.e-3], [1.e+6, 1.e-3]]
    outside_value: 1.e-4
  grad_clip_norm: 10

  # device
  gpu_device: 1
  gpu_frac: 0.2

########################
### Action selection ###
########################

get_action:
  type: lattice # random / lattice

  random:
    type: random
    K: 1000
  lattice:
    type: lattice
    K: 10
